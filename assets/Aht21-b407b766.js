import{k as b,l as j,f as E,s as k,_ as V,a as P,b as X,d as G,c as J,e as K,g as L,h as q,i as Q,j as W}from"./utils-4a2a637f.js";import"./lodash-cd78795a.js";import{r as o,T as $,z as Y,P as C,U as Z,A as tt,B as f,C as v,D as e,O as et,J as a,F as l,K as D,M as at}from"./index-b4fcf539.js";import{_ as nt}from"./Space-22a2d323.js";class st{constructor(t){this.adapter=t,this.address="38"}async init(){const[t]=await this.adapter.transmit(`AT+TR=${this.address}01`);t&8||(await this.adapter.transmit(`AT+TX=${this.address}be0800`),await b(10))}async measure(){await this.adapter.transmit(`AT+TX=${this.address}ac3308`),await b(80);const t=await this.adapter.transmit(`AT+TR=${this.address}07`);if(t[0]&128)throw new Error("Measurement not completed");const r=((t[1]<<12)+(t[2]<<4)+((t[3]&240)>>4))/(1<<20),u=(((t[3]&15)<<16)+(t[4]<<8)+t[5])/(1<<20)*200-50;if(j(t))throw new Error("crc8 mismatch");return Promise.resolve({humidity:r,temperature:u})}}const it={style:{position:"relative",height:"60vh"}},ot={name:"DeviceAht21"},_t=Object.assign(ot,{setup(S){const t=o(!1),r=o(null),u=o(null),d=o(200),y=o(null),p=o("38"),H=$("emitter"),{transmit:c,connect:I}=$("adapter");let m=null,n=null,h=Date.now();const w=async()=>{try{({humidity:u.value,temperature:r.value}=await m.measure());const s=Date.now();n.data.datasets[0].data.push({x:s,y:r.value}),n.data.datasets[1].data.push({x:s,y:u.value}),s>h+50&&(h=s,C().then(()=>{n.options.scales.x.min=k(new Date,{minutes:1});const i=n.data.datasets[1].data.findLastIndex(_=>_.x<n.options.scales.x.min);n.data.datasets[0].data.splice(0,i),n.data.datasets[1].data.splice(0,i),n.update()})),t.value&&(await W(d.value),w())}catch(s){console.log(s),t.value=!1}},z=async()=>{await I(),await c("AT"),await c("AT");const s=await c("AT+SC");if(!Array.from(s).includes(parseInt(p.value,16)))throw H.emit("message",{type:"error",data:{message:"Not Found"}}),new Error(`AHT21 at adrress 0x${p.value} NOT Found`);m=new st({transmit:c},p.value),await m.init(),t.value=!0,w()};return Y(()=>{console.log("onMounted"),C().then(()=>{n=new Z(y.value,{type:"line",data:{datasets:[{label:"Temperature",fill:!1,data:[],yAxisID:"yT"},{label:"Humidity",fill:!1,data:[],yAxisID:"yH"}]},options:{spanGaps:!0,responsive:!0,maintainAspectRatio:!1,parsing:!1,normalized:!0,animations:{numbers:{properties:["x"],type:"number",from:void 0}},scales:{x:{type:"time",min:E(k(new Date,{minutes:1})),ticks:{stepSize:5},time:{unit:"second"},title:{display:!0,text:"Date"}},yT:{title:{display:!0,text:"Celsius"},ticks:{stepSize:1,precision:1}},yH:{title:{display:!0,text:"%"},ticks:{stepSize:10,precision:0},position:"right",grid:{drawOnChartArea:!1}}}}})})}),tt(()=>{n.destroy()}),(s,i)=>{const _=P,B=X,N=G,O=J,R=K,x=at,F=nt,g=L,T=q,M=Q,U=et;return f(),v(U,null,{header:e(()=>[a(B,null,{default:e(()=>[a(_,null,{default:e(()=>[l("Device")]),_:1}),a(_,null,{default:e(()=>[l("AHT21")]),_:1})]),_:1})]),"header-extra":e(()=>[a(F,null,{default:e(()=>[a(R,{"label-placement":"left",inline:""},{default:e(()=>[a(O,{label:"Interval (ms):",style:{width:"300px"}},{default:e(()=>[a(N,{value:d.value,"onUpdate:value":i[0]||(i[0]=A=>d.value=A),step:100,min:0,max:5e3},null,8,["value"])]),_:1})]),_:1}),a(V),t.value?(f(),v(x,{key:0,onClick:i[1]||(i[1]=A=>{t.value=!1}),type:"warning"},{default:e(()=>[l("Stop")]),_:1})):(f(),v(x,{key:1,onClick:z,type:"primary"},{default:e(()=>[l("Start")]),_:1}))]),_:1})]),default:e(()=>[a(M,{"x-gap":"12",cols:2},{default:e(()=>[a(T,null,{default:e(()=>[a(g,{label:"Temperature",value:r.value},{suffix:e(()=>[l("Â°C")]),_:1},8,["value"])]),_:1}),a(T,null,{default:e(()=>[a(g,{label:"Air Humidity",value:u.value*100},{suffix:e(()=>[l("%")]),_:1},8,["value"])]),_:1})]),_:1}),D("div",it,[D("canvas",{ref_key:"chartRef",ref:y},null,512)])]),_:1})}}});export{_t as default};
