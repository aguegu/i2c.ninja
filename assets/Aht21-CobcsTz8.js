import{j as $,k as P,s as k,_ as X,a as J,b as K,e as L,c as q,f as Q,g as W,h as Y,i as Z,m as tt,d as et}from"./utils-Dax9hThb.js";import"./lodash-B4X47Vf9.js";import{F as at,f as nt}from"./FileSaver.min-DLZTFMxs.js";import{r,U as C,z as st,P as D,V as ot,A as it,R as lt,C as h,D as e,O as rt,B as y,J as n,F as u,G as S,$ as ut,K as F,M as ct}from"./index-CPfc8qSv.js";import{_ as pt}from"./Space-BaYJkXh7.js";class dt{constructor(t){this.adapter=t,this.address="38"}async init(){const[t]=await this.adapter.transmit(`AT+TR=${this.address}01`);t&8||(await this.adapter.transmit(`AT+TX=${this.address}be0800`),await $(10))}async measure(){await this.adapter.transmit(`AT+TX=${this.address}ac3308`),await $(80);const t=await this.adapter.transmit(`AT+TR=${this.address}07`);if(t[0]&128)throw new Error("Measurement not completed");const i=((t[1]<<12)+(t[2]<<4)+((t[3]&240)>>4))/(1<<20),l=(((t[3]&15)<<16)+(t[4]<<8)+t[5])/(1<<20)*200-50;if(P(t))throw new Error("crc8 mismatch");return Promise.resolve({humidity:i,temperature:l})}}const _t={style:{position:"relative",height:"60vh"}},mt={name:"DeviceAht21"},wt=Object.assign(mt,{setup(H){const t=r(!1),i=r(null),l=r(null),d=r(200),g=r(null),_=r("38"),R=C("emitter"),{transmit:c,connect:B}=C("adapter"),m=[];let f=null,s=null,w=Date.now();const x=async()=>{try{({humidity:l.value,temperature:i.value}=await f.measure());const a=Date.now();s.data.datasets[0].data.push({x:a,y:i.value}),s.data.datasets[1].data.push({x:a,y:l.value}),m.push([nt(a,{fractionDigits:3}),i.value,l.value]),a>w+50&&(w=a,D().then(()=>{s.options.scales.x.min=k(new Date,{minutes:1});const o=s.data.datasets[1].data.findLastIndex(p=>p.x<s.options.scales.x.min);s.data.datasets[0].data.splice(0,o),s.data.datasets[1].data.splice(0,o),s.update()})),t.value&&(await et(d.value),x())}catch(a){console.log(a),t.value=!1}},I=async()=>{await B(),await c("AT"),await c("AT");const a=await c("AT+SC");if(!Array.from(a).includes(parseInt(_.value,16)))throw R.emit("message",{type:"error",data:{message:"Not Found"}}),new Error(`AHT21 at adrress 0x${_.value} NOT Found`);f=new dt({transmit:c},_.value),await f.init(),t.value=!0,m.length=0,x()};st(()=>{console.log("onMounted"),D().then(()=>{s=new ot(g.value,{type:"line",data:{datasets:[{label:"Temperature",fill:!1,data:[],yAxisID:"yT"},{label:"Humidity",fill:!1,data:[],yAxisID:"yH"}]},options:{spanGaps:!0,responsive:!0,maintainAspectRatio:!1,parsing:!1,normalized:!0,animations:{numbers:{properties:["x"],type:"number",from:void 0}},scales:{x:{type:"time",min:k(new Date,{minutes:1}),ticks:{stepSize:5},time:{unit:"second"}},yT:{title:{display:!0,text:"Celsius"},ticks:{stepSize:1,precision:1}},yH:{title:{display:!0,text:"%"},ticks:{stepSize:10,precision:0},position:"right",grid:{drawOnChartArea:!1}}}}})})});const j=()=>{const a=new Blob([`timestamp,temperature,humidity
`,m.map(o=>o.join(",")).join(`
`)],{type:"text/csv;charset=utf-8"});at.saveAs(a,`AHT21_${new Date().toISOString()}.csv`)};return it(()=>{s.destroy()}),(a,o)=>{const p=J,z=K,M=L,N=q,O=Q,v=ct,E=lt("svg-icon"),U=pt,b=W,A=Y,V=Z,G=rt;return y(),h(G,null,{header:e(()=>[n(z,null,{default:e(()=>[n(p,null,{default:e(()=>[u("Device")]),_:1}),n(p,null,{default:e(()=>[u("AHT21")]),_:1})]),_:1})]),"header-extra":e(()=>[n(U,null,{default:e(()=>[n(O,{"label-placement":"left",inline:""},{default:e(()=>[n(N,{label:`${a.$t("adapter.Interval")} (ms)`,style:{width:"300px"}},{default:e(()=>[n(M,{value:d.value,"onUpdate:value":o[0]||(o[0]=T=>d.value=T),step:100,min:0,max:5e3},null,8,["value"])]),_:1},8,["label"])]),_:1}),n(X),t.value?(y(),h(v,{key:0,onClick:o[1]||(o[1]=T=>{t.value=!1}),type:"warning"},{default:e(()=>[u(S(a.$t("adapter.Stop")),1)]),_:1})):(y(),h(v,{key:1,onClick:I,type:"primary"},{default:e(()=>[u(S(a.$t("adapter.Start")),1)]),_:1})),n(v,{onClick:j},{icon:e(()=>[n(E,{type:"mdi",path:ut(tt)},null,8,["path"])]),_:1})]),_:1})]),default:e(()=>[n(V,{"x-gap":"12",cols:2},{default:e(()=>[n(A,null,{default:e(()=>[n(b,{label:a.$t("measurement.Temperature"),value:i.value},{suffix:e(()=>[u("Â°C")]),_:1},8,["label","value"])]),_:1}),n(A,null,{default:e(()=>[n(b,{label:"Air Humidity",value:l.value*100},{suffix:e(()=>[u("%")]),_:1},8,["value"])]),_:1})]),_:1}),F("div",_t,[F("canvas",{ref_key:"chartRef",ref:g},null,512)])]),_:1})}}});export{wt as default};
